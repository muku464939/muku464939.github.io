{"version":3,"file":"component---src-pages-index-js-2fb9d2085b85a43d5cc1.js","mappings":"iKA0DA,IA/CY,KAAO,IAAD,IAChB,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAA+B,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBF,OACF,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,OAAtB,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,IACTC,IAAI,kBAAiB,sBAEtBZ,aAAM,EAANA,EAAQa,OACP,yBACGb,EAAOa,KAAK,2BAAS,KAAEb,aAAM,EAANA,EAAQc,UAAW,KAAI,KAQ/C,C,uHCmCV,UAlFkB,IAAyB,IAAD,MAAvB,KAAEhB,EAAI,SAAEiB,GAAU,EACnC,MAAMC,GAAkC,QAAtB,EAAAlB,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBe,QAAK,QACzCC,EAAYpB,EAAKoB,UAAUC,MAC3BC,EAAYtB,EAAKsB,UAAUD,MAEjC,OACE,gBAAC,IAAM,CAACJ,SAAUA,EAAUE,MAAOD,GACjC,sDACA,gBAAC,IAAG,MAIJ,+BACE,sBAAIZ,UAAU,qBAAmB,cACjC,uBAAKA,UAAU,cACb,sBAAIiB,MAAO,CAAEC,UAAU,OAASC,OAAQ,EAAGC,QAAS,IACjDJ,EAAUK,KAAIC,IACb,MAAMT,EAAQS,EAAKC,YAAYV,OAASS,EAAKE,OAAOC,KACpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,KAAMR,MAAO,CAAEU,aAAc,SAChD,2BAAS3B,UAAU,iBAAiB4B,WAAS,EAACC,SAAS,6BACrD,8BACE,sBAAIZ,MAAO,CAAEU,aAAc,WACzB,gBAAC,EAAAG,KAAI,CAACC,GAAIT,EAAKE,OAAOC,KAAMO,SAAS,OACnC,wBAAMA,SAAS,YAAYnB,KAG/B,6BAAQS,EAAKC,YAAYU,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQb,EAAKC,YAAYa,aAAed,EAAKe,SAE/CL,SAAS,kBAIZ,OAQf,+BACE,sBAAIhC,UAAU,qBAAmB,eACjC,uBAAKA,UAAU,cACb,sBAAIiB,MAAO,CAAEC,UAAU,OAASC,OAAQ,EAAGC,QAAS,IACjDN,EAAUO,KAAIC,IACb,MAAMT,EAAQS,EAAKC,YAAYV,OAASS,EAAKE,OAAOC,KACpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,KAAMR,MAAO,CAAEU,aAAc,SAChD,2BAAS3B,UAAU,iBAAiB4B,WAAS,EAACC,SAAS,6BACrD,8BACE,sBAAIZ,MAAO,CAAEU,aAAc,WACzB,gBAAC,EAAAG,KAAI,CAACC,GAAIT,EAAKE,OAAOC,KAAMO,SAAS,OACnC,wBAAMA,SAAS,YAAYnB,KAG/B,6BAAQS,EAAKC,YAAYU,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQb,EAAKC,YAAYa,aAAed,EAAKe,SAE/CL,SAAS,kBAIZ,OAMR,EAMN,MAAMM,EAAO,IAAM,gBAAC,IAAG,CAACzB,MAAM,Q","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={100}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          {author.name}<br></br> {author?.summary || null}\n          {` `}\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`} target=\"_blank\">\n            Twitter\n          </a>\n          はこちら */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst IndexPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const blogPosts = data.blogPosts.nodes\n  const newsPosts = data.newsPosts.nodes\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <title>Tak-7 | 七原宇紀 公式ウェブサイト</title>\n      <Bio />\n\n\n      {/* News Posts Section */}\n      <section>\n        <h1 className=\"h1-scrollboxtitle\">News Posts</h1>\n        <div className=\"scroll-box\">\n          <ol style={{ listStyle: `none`, margin: 0, padding: 0 }}>\n            {newsPosts.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n              return (\n                <li key={post.fields.slug} style={{ marginBottom: \"1rem\" }}>\n                  <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n                    <header>\n                      <h2 style={{ marginBottom: \"0.2rem\" }}>\n                        <Link to={post.fields.slug} itemProp=\"url\">\n                          <span itemProp=\"headline\">{title}</span>\n                        </Link>\n                      </h2>\n                      <small>{post.frontmatter.date}</small>\n                    </header>\n                    <section>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: post.frontmatter.description || post.excerpt,\n                        }}\n                        itemProp=\"description\"\n                      />\n                    </section>\n                  </article>\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n      </section>\n\n      {/* Blog Posts Section */}\n      <section>\n        <h1 className=\"h1-scrollboxtitle\"> Blog Posts</h1>\n        <div className=\"scroll-box\">\n          <ol style={{ listStyle: `none`, margin: 0, padding: 0 }}>\n            {blogPosts.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n              return (\n                <li key={post.fields.slug} style={{ marginBottom: \"1rem\" }}>\n                  <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n                    <header>\n                      <h2 style={{ marginBottom: \"0.2rem\" }}>\n                        <Link to={post.fields.slug} itemProp=\"url\">\n                          <span itemProp=\"headline\">{title}</span>\n                        </Link>\n                      </h2>\n                      <small>{post.frontmatter.date}</small>\n                    </header>\n                    <section>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: post.frontmatter.description || post.excerpt,\n                        }}\n                        itemProp=\"description\"\n                      />\n                    </section>\n                  </article>\n                </li>\n              )\n            })}\n          </ol>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const Head = () => <Seo title=\"Home\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    blogPosts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content/blog/\" } }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n    newsPosts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content/news/\" } }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","location","siteTitle","title","blogPosts","nodes","newsPosts","style","listStyle","margin","padding","map","post","frontmatter","fields","slug","key","marginBottom","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","Head"],"sourceRoot":""}